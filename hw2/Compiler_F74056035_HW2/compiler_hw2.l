/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
extern YYSTYPE yylval; //YYSTYPE
char buf[256];
extern int SCOPE;
extern char errbuff[256];
extern void yyerror(char *s);
extern void dump_symbol();
/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, 256 - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return ADD; }
"-" 	{ CONCAT; return SUB; }
"*" 	{ CONCAT; return MUL; }
"/" 	{ CONCAT; return DEV; }
"%"     { CONCAT; return MOD; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT;}
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return ASGN; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DEVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return LB; }
")"		{ CONCAT; return RB; }
"{"		{ CONCAT; return LCB; }
"}"		{ CONCAT; return RCB; }
"["		{ CONCAT; return LSB; }
"]"		{ CONCAT; return RSB; }
","		{ CONCAT; return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; return VOID; }
"int"		{ CONCAT; return INT; }
"float"  	{ CONCAT; return FLOAT; }
"string"  	{ CONCAT; return STRING; }
"bool"  	{ CONCAT; return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RET; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT; }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ strcpy(yylval.string, yytext); CONCAT; return STR_CONST; }

 /* Number Constant */
{integer}	{ 
                yylval.i_val = atoi(yytext);
                CONCAT;
                return I_CONST;
            }
{float}	    { 
                yylval.f_val = atof(yytext);
                CONCAT;
                return F_CONST;
            }

 /* C type Comment */
"/*"				{ BEGIN COMMENT;  CONCAT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ printf("%d: %s\n", yylineno, buf); strcpy(buf,""); }
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ CONCAT; BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
 {id}       { strcpy(yylval.string, yytext); CONCAT; return ID; }

 /* others */

[;]         { CONCAT; return SEMICOLON; }
[\n]        { 
                if(strlen(buf) > 0){
                    printf("%d: %s\n", yylineno, buf); 
                }
                else
                    printf("%d:\n", yylineno); 
                if(strlen(errbuff) > 0)
                {
                    yyerror(errbuff);
                    strcpy(errbuff,"");
                }
                if(strchr(buf,'}')){
                    SCOPE++;
                    dump_symbol();
                    SCOPE--;
                }
                strcpy(buf,""); 
            }
[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */
<<EOF>>     { dump_symbol(); printf("\nTotal lines: %d \n",yylineno); return 0; }

%%

int yywrap()
{
    return 1;
}
